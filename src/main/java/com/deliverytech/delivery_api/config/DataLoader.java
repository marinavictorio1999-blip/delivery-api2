package com.deliverytech.delivery_api.config;
 
import com.deliverytech.delivery_api.model.*;
import com.deliverytech.delivery_api.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import java.math.BigDecimal;
 
import java.util.Arrays;
import java.util.List;
 
 
@Component
public class DataLoader implements CommandLineRunner {
 
    @Autowired
    private ClienteRepository clienteRepository;
 
    @Autowired
    private RestauranteRepository restauranteRepository;
 
    @Autowired
    private ProdutoRepository produtoRepository;
 
    @Autowired
    private PedidoRepository pedidoRepository;
 
    @Override
    public void run(String... args) throws Exception {
        System.out.println("=== INICIANDO CARGA DE DADOS DE TESTE ===");
 
     
        // Inserir dados de teste (sem limpar dados existentes)
        inserirClientes();
        inserirRestaurantes();
 
        System.out.println("=== CARGA DE DADOS CONCLU√çDA ===");
       
        // ‚úÖ ADICIONAR: Spring Boot iniciada com sucesso + Bender
        System.out.println("\n‚úÖ Spring Boot Application iniciada com sucesso!");
       
       
        // ‚úÖ INFORMAR sobre captura autom√°tica
        System.out.println("\nüéØ SISTEMA DE CAPTURA AUTOM√ÅTICA ATIVO!");
        System.out.println("üìÅ Respostas ser√£o salvas em: ./entregaveis/");
        System.out.println("üîÑ Fa√ßa requisi√ß√µes para /api/* e veja os arquivos sendo gerados!\n");
    }
 
 
private void inserirClientes() {
    System.out.println("--- Inserindo clientes ---");
 
    Cliente cliente1 = new Cliente(null, "Jo√£o Silva", "joao@email.com",
            "11987654321", "Rua das Flores, 123 - Vila Madalena, S√£o Paulo - SP",
            null, true, null);
 
    Cliente cliente2 = new Cliente(null, "Maria Santos", "maria@email.com",
            "11876543210", "Av. Paulista, 456 - Bela Vista, S√£o Paulo - SP",
            null, true, null);
 
    Cliente cliente3 = new Cliente(null, "Pedro Oliveira", "pedro@email.com",
            "11765432109", "Rua Augusta, 789 - Consola√ß√£o, S√£o Paulo - SP",
            null, false, null);
 
    Cliente cliente4 = new Cliente(null, "Ana Costa", "ana@email.com",
            "11654321098", "Rua Oscar Freire, 321 - Jardins, S√£o Paulo - SP",
            null, true, null);
 
    Cliente cliente5 = new Cliente(null, "Carlos Ferreira", "carlos@email.com",
            "11543210987", "Rua 25 de Mar√ßo, 654 - Centro, S√£o Paulo - SP",
            null, true, null);
 
    List<Cliente> clientes = Arrays.asList(cliente1, cliente2, cliente3, cliente4, cliente5);
 
    for (Cliente cliente : clientes) {
        if (clienteRepository.findByEmail(cliente.getEmail()).isEmpty()) {
            clienteRepository.save(cliente);
            System.out.println("‚úì Cliente " + cliente.getNome() + " inserido");
        } else {
            System.out.println("‚ö† Cliente " + cliente.getNome() + " j√° existe, ignorando...");
        }
    }
}
 
private void inserirRestaurantes() {
    System.out.println("--- Inserindo Restaurantes ---");
 
    Restaurante restaurante1 = Restaurante.builder()
            .nome("Pizza Express")
            .categoria("Italiana")
            .telefone("1133333333")
            .TaxaEntrega(new BigDecimal("3.50"))
            .ativo(true)
            .build();
 
    Restaurante restaurante2 = Restaurante.builder()
            .nome("Burger King")
            .categoria("Fast Food")
            .telefone("1144444444")
            .TaxaEntrega(new BigDecimal("5.00"))
            .ativo(true)
            .build();
 
    List<Restaurante> restaurantes = Arrays.asList(restaurante1, restaurante2);
 
    // Salvar restaurantes se n√£o existirem
    for (Restaurante restaurante : restaurantes) {
        if (restauranteRepository.findByNome(restaurante.getNome()).isEmpty()) {
            restauranteRepository.save(restaurante);
            System.out.println("‚úì Restaurante " + restaurante.getNome() + " inserido");
        } else {
            System.out.println("‚ö† Restaurante " + restaurante.getNome() + " j√° existe, ignorando...");
        }
    }
 
    // Agora sim, chamar inserirProdutos()
   
}
 
 
 
 
private void inserirProdutos() {
    System.out.println("--- Inserindo Produtos ---");
 
    var restaurantes = restauranteRepository.findAll();
 
    var pizzaExpress = restaurantes.stream()
            .filter(r -> r.getNome().equals("Pizza Express"))
            .findFirst().orElse(null);
 
    var burgerKing = restaurantes.stream()
            .filter(r -> r.getNome().equals("Burger King"))
            .findFirst().orElse(null);
 
    var sushiHouse = restaurantes.stream()
            .filter(r -> r.getNome().equals("Sushi House"))
            .findFirst().orElse(null);
 
    var gyrosAthenas = restaurantes.stream()
            .filter(r -> r.getNome().equals("Gyros Athenas"))
            .findFirst().orElse(null);
 
    var chipariaPorto = restaurantes.stream()
            .filter(r -> r.getNome().equals("Chiparia do Porto"))
            .findFirst().orElse(null);
 
    // Criando produtos
    List<Produto> produtos = Arrays.asList(
        Produto.builder()
            .nome("Pizza Margherita")
            .categoria("Pizza")
            .descricao("Pizza cl√°ssica com molho de tomate, mussarela e manjeric√£o")
            .preco(new BigDecimal("25.90"))
            .restaurante(pizzaExpress)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Pizza Pepperoni")
            .categoria("Pizza")
            .descricao("Pizza com molho de tomate, mussarela e pepperoni")
            .preco(new BigDecimal("29.90"))
            .restaurante(pizzaExpress)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Big Burger")
            .categoria("Hamb√∫rguer")
            .descricao("Hamb√∫rguer duplo com queijo, alface, tomate e molho especial")
            .preco(new BigDecimal("18.50"))
            .restaurante(burgerKing)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Batata Frita Grande")
            .categoria("Acompanhamento")
            .descricao("Por√ß√£o grande de batatas fritas crocantes")
            .preco(new BigDecimal("8.90"))
            .restaurante(burgerKing)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Sushi Salm√£o")
            .categoria("Sushi")
            .descricao("8 pe√ßas de sushi de salm√£o fresco")
            .preco(new BigDecimal("32.00"))
            .restaurante(sushiHouse)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Hot Roll")
            .categoria("Sushi")
            .descricao("8 pe√ßas de hot roll empanado com salm√£o")
            .preco(new BigDecimal("28.50"))
            .restaurante(sushiHouse)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Gyros de Cordeiro")
            .categoria("Espeto")
            .descricao("Espeto de cordeiro grelhado com molho tzatziki, tomate e cebola roxa")
            .preco(new BigDecimal("35.90"))
            .restaurante(gyrosAthenas)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Souvlaki de Frango")
            .categoria("Espeto")
            .descricao("Espetinho de frango marinado com ervas gregas e batata frita")
            .preco(new BigDecimal("28.50"))
            .restaurante(gyrosAthenas)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Fish & Chips Tradicional")
            .categoria("Peixe")
            .descricao("Fil√© de bacalhau empanado com batatas fritas e molho t√°rtaro")
            .preco(new BigDecimal("42.90"))
            .restaurante(chipariaPorto)
            .ativo(true)
            .build(),
 
        Produto.builder()
            .nome("Por√ß√£o de Camar√£o Empanado")
            .categoria("Frutos do Mar")
            .descricao("500g de camar√£o empanado com molho agridoce")
            .preco(new BigDecimal("52.00"))
            .restaurante(chipariaPorto)
            .ativo(true)
            .build()
    );
 
    // Salvar todos os produtos
   for (Produto produto : produtos) {
    // Verifica se j√° existe produto com mesmo nome no mesmo restaurante
    var existente = produtoRepository.findByNomeAndRestaurante_Id(produto.getNome(), produto.getRestaurante().getId());
 
    if (existente.isEmpty()) {
        produtoRepository.save(produto);
        System.out.println("‚úì Produto " + produto.getNome() + " inserido");
    } else {
        System.out.println("‚ö† Produto " + produto.getNome() + " j√° existe no restaurante "
                           + produto.getRestaurante().getNome() + ", ignorando...");
    }
}
 
}
 
 
 
}